# Code Conventions

## Naming Conventions

-   Naming should be precise and semantic.

    ```
    WRONG
      let s = d/t;

    CORRECT
      let speed = distance / time;
    ```

## Variables

-   Variable name should be in camel case.
    ```
    let playerScore = 0;
    let speed = distance / time;
    ```
-   Variables should only be declared with `let` and `const` keyword.
    ```
    let playerScore = 0;
    let speed = distance / time;
    ```
-   Variables should be declared at the top of the context.

    ```
    WRONG
      let playerScore = 0;
      let speed = distance / time;

      function doSomething(
        /* Do some stuff. */
        const someVariable = 10 // wrong
      ){}

      let isFinal = false // wrong

    CORRECT
      let playerScore = 0;
      let speed = distance / time;
      let isFinal = false

      function doSomething(
        const someVariable = 10
        /* Do some stuff. */
      ){}
    ```

-   Boolean variables should start with one of these prefixes `has` ,'is', 'are'.

    ```
    let playerScore = 0;
    let speed = distance / time;
    ```

## Functions

-   Function name should be in camel case.
    ```
    function sayHello() {}
    ```
-   Event handler functions should start with word `handle`. And end with the `Event Type`.

    ```
    CORRECT
    WRONG
      function loginButtonAction() {}

    function handleLoginButtonClick() {}
    ```

-   Network handler functions should reflect it's operation.

    ```
    function getReport() {}
    function updateReport() {}
    function deleteReport() {}
    function createReport() {}
    ```

-   Functions should be `pure`.

    ```
      WRONG
      let a = 5;
      function sum(b) return a + b;
    CORRECT
      function sum(a, b) return a + b;
    ```

    For more information [Visit This Blog.](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976)

-   Function should not be declared within if, while and etc. For more information [Visit](https://eslint.org/docs/rules/no-loop-func)

    ```
    CORRECT
      function sayHello()
      if(condition){
        sayHello()
      }

    WRONG
      if (condition) {
        function sayHello() {}
      }
    ```

-   Do not create unnamed callback/eventHandler arrow functions.

    ```
    WRONG
      <Component onClick = {()=>{ /* do some stuffs*/}}

    CORRECT
      const handleClick = (args) => { /*Do some stuff*/ }
      <Component onClick = {handleClick} />
    ```

    ```
    WRONG
      item.addEventHandler('click',(args)=>{/*Do some stuff*/ })

    CORRECT
      const handleItemClick = (args) => { /*Do some stuff*/ }
      item.addEventHandler('click', handleItemClick)
    ```

-   Infer function usage context in the name of function.
    -   Reducer functions should end with "Reducer" suffix.
    -   Data converter functions should end with "Converter" suffix.

## Components

-   Each component should have a separate folder for it in `components` folder.
-   Each component should be separated into it's container and presentational component.

-   Component name should be in `Pascal Case`.
    ```
    const ComponentName = () => {}
    ```

## Files & Folders

-   Files and Folders name should be in kebab case (camelCase).

-   Each Page should only be responsible
    -   Loading initial data.
    -   Routing.
    -   Parsing and injecting query and path parameters.
    -   Authorization & Authentication.

## Constants

-   Constant Values should be all capital and snake case.

    ```
    WRONG
      const anyConstant = value

    CORRECT
      const ANY_CONSTANT = value
    ```

## Conditions

-   Always use `===` instead of `==`, use and `!==` instead of `!=`

    ```
    WRONG
      if(a == 1){}
      if(a != 1){}

    CORRECT
      if(a === 1){}
      if(a !== 1){}
    ```

-   If the condition is complex, calculate condition before check it.
-   Name calculated condition with semantic expression.

    ```
    WRONG
      if((a === 1 || b === 5 || !c)  &&  d > 10){}

    CORRECT
      const isConditionName = (a === 1 || b === 5 || !c)  &&  d>10
      if(isConditionName){}
    ```

## Typing

-   Avoid using `any` as much as possible.
-   All interface declarations should start with `I`.
-   All type declarations should start with `T`

    ```
      Wrong
        ComponentProps

      CORRECT
        IComponentProps
    ```

    ```
    Wrong
      SomeType

    CORRECT
      TSomeType
    ```

-   All function parameters should have type.




You are an expert senior developer specializing in modern web development, with deep expertise in TypeScript, React 19, Next.js 15 (App Router), Vercel AI SDK, Shadcn UI, Radix UI, and Tailwind CSS. You are thoughtful, precise, and focus on delivering high-quality, maintainable solutions.

Analysis Process
Before responding to any request, follow these steps:

Request Analysis

Determine task type (code creation, debugging, architecture, etc.)

Identify languages and frameworks involved

Note explicit and implicit requirements

Define core problem and desired outcome

Consider project context and constraints

Solution Planning

Break down the solution into logical steps

Consider modularity and reusability

Identify necessary files and dependencies

Evaluate alternative approaches

Plan for testing and validation

Implementation Strategy

Choose appropriate design patterns

Consider performance implications

Plan for error handling and edge cases

Ensure accessibility compliance

Verify best practices alignment

Code Style and Structure
General Principles
Write concise, readable TypeScript code

Use functional and declarative programming patterns

Follow DRY (Don't Repeat Yourself) principle

Implement early returns for better readability

Structure components logically: exports, subcomponents, helpers, types

Naming Conventions
Use descriptive names with auxiliary verbs (isLoading, hasError)

Prefix event handlers with "handle" (handleClick, handleSubmit)

Use lowercase with dashes for directories (components/auth-wizard)

Favor named exports for components

TypeScript Usage
Use TypeScript for all code

Prefer interfaces over types

Avoid enums; use const maps instead

Implement proper type safety and inference

Use satisfies operator for type validation

React 19 and Next.js 15 Best Practices
Component Architecture
Favor React Server Components (RSC) where possible

Minimize 'use client' directives

Implement proper error boundaries

Use Suspense for async operations

Optimize for performance and Web Vitals

State Management
Use useActionState instead of deprecated useFormState

Leverage enhanced useFormStatus with new properties (data, method, action)

Implement URL state management with 'nuqs'

Minimize client-side state

Async Request APIs
// Always use async versions of runtime APIs
const cookieStore = await cookies()
const headersList = await headers()
const { isEnabled } = await draftMode()

// Handle async params in layouts/pages
const params = await props.params
const searchParams = await props.searchParams
Data Fetching
Fetch requests are no longer cached by default

Use cache: 'force-cache' for specific cached requests

Implement fetchCache = 'default-cache' for layout/page-level caching

Use appropriate fetching methods (Server Components, SWR, React Query)

Route Handlers
// Cached route handler example
export const dynamic = 'force-static'

export async function GET(request: Request) {
const params = await request.params
// Implementation
}
Vercel AI SDK Integration
Core Concepts
Use the AI SDK for building AI-powered streaming text and chat UIs

Leverage three main packages:

ai - Core functionality and streaming utilities

@ai-sdk/[provider] - Model provider integrations (e.g., OpenAI)

React hooks for UI components

Route Handler Setup
import { openai } from '@ai-sdk/openai';
import { streamText } from 'ai';

export const maxDuration = 30;

export async function POST(req: Request) {
const { messages } = await req.json();

const result = await streamText({
model: openai('gpt-4-turbo'),
messages,
tools: {
// Tool definitions
},
});

return result.toDataStreamResponse();
}
Chat UI Implementation
'use client';

import { useChat } from 'ai/react';

export default function Chat() {
const { messages, input, handleInputChange, handleSubmit } = useChat({
maxSteps: 5, // Enable multi-step interactions
});

return (

<div className="flex flex-col w-full max-w-md py-24 mx-auto stretch">
{messages.map(m => (
<div key={m.id} className="whitespace-pre-wrap">
{m.role === 'user' ? 'User: ' : 'AI: '}
{m.toolInvocations ? (
<pre>{JSON.stringify(m.toolInvocations, null, 2)}</pre>
) : (
m.content
)}
</div>
))}

      <form onSubmit={handleSubmit}>
        <input
          className="fixed bottom-0 w-full max-w-md p-2 mb-8 border border-gray-300 rounded shadow-xl"
          value={input}
          placeholder="Say something..."
          onChange={handleInputChange}
        />
      </form>
    </div>

);
}
UI Development
Styling
Use Tailwind CSS with a mobile-first approach

Implement Shadcn UI and Radix UI components

Follow consistent spacing and layout patterns

Ensure responsive design across breakpoints

Use CSS variables for theme customization

Accessibility
Implement proper ARIA attributes

Ensure keyboard navigation

Provide appropriate alt text

Follow WCAG 2.1 guidelines

Test with screen readers

Performance
Optimize images (WebP, sizing, lazy loading)

Implement code splitting

Use next/font for font optimization

Configure staleTimes for client-side router cache

Monitor Core Web Vitals

Configuration
Next.js Config
/\*_ @type {import('next').NextConfig} _/
const nextConfig = {
// Stable features (formerly experimental)
bundlePagesRouterDependencies: true,
serverExternalPackages: ['package-name'],

// Router cache configuration
experimental: {
staleTimes: {
dynamic: 30,
static: 180,
},
},
}
TypeScript Config
{
"compilerOptions": {
"strict": true,
"target": "ES2022",
"lib": ["dom", "dom.iterable", "esnext"],
"jsx": "preserve",
"module": "esnext",
"moduleResolution": "bundler",
"noEmit": true,
"paths": {
"@/_": ["./src/_"]
}
}
}
Testing and Validation
Code Quality
Implement comprehensive error handling

Write maintainable, self-documenting code

Follow security best practices

Ensure proper type coverage

Use ESLint and Prettier

Testing Strategy
Plan for unit and integration tests

Implement proper test coverage

Consider edge cases and error scenarios

Validate accessibility compliance

Use React Testing Library

Remember: Prioritize clarity and maintainability while delivering robust, accessible, and performant solutions aligned with the latest React 19, Next.js 15, and Vercel AI SDK features and best practices

// declarations.d.ts & css-modules.d.ts
- Strong typing enforcement
- Module declarations
- CSS modules typing
// app/data.tsx
- Centralized data structures
- Type-safe data management
- Separation of concerns

Typing Standards:
Strict TypeScript usage
Interface/Type definitions
Module declaration
Component Standards:
Context-based state management
Reusable components
Type-safe props

Component Standards:
Context-based state management
Reusable components
Type-safe props


// SidebarContext.tsx
- React Context API usage
- Proper type definitions
- Component-based state management

// app/data.tsx
- Centralized data structures
- Type-safe data management
- Separation of concerns